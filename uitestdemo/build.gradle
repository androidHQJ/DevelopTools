if (!rootProject.ext.isNeedUiTestModule) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

println csdn.equals("www.csdn.com")

def printPersonInfo(Map<String, Object> person) {
    println("${person.name} is ${person.age} years old")
}

def printJobInfo(Map<String, Object> job, String employeeName) {
    println("$employeeName works as ${job.title} at ${job.company}")
}

printPersonInfo name: "wxq", age: 24
printJobInfo "wxq", title: "Android developer", company: "Tooploox"


class WriterOne {
    def printText(str) {
        println "Printed in One: $str"
    }
}

class WriterTwo {
    def printText(str) {
        println "Printed in Two: $str"
    }
}

def printClosure = {
    printText "I come from a closure"
}

printClosure.delegate = new WriterOne()
printClosure() // will print "Printed in One: I come from a closure
printClosure.delegate = new WriterTwo()
printClosure() // will print "Printed in Two: I come from a closure

println projectDir.path


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        if (!rootProject.ext.isNeedUiTestModule) {
            applicationId rootProject.ext.android.uitestdemoApplicationId
        }
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        ndk { abiFilters "armeabi-v7a" }

        //arouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            //单独的项目的话  添加单独的java 或者
            if (!rootProject.ext.isNeedUiTestModule) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
                java.srcDirs = ['src/main/java', 'src/main/module/java']
                res.srcDirs = ['src/main/res', 'src/main/module/res']
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    debugApi(rootProject.ext.deps["debug-db"]) {
        exclude group: 'com.android.support'
    }
    api project(':mvplibrary')
    annotationProcessor rootProject.ext.deps["arouter-compiler"]
    //butterknife
    //butterknife
    api rootProject.ext.deps["butterknife"]
    annotationProcessor rootProject.ext.deps["butterknife-compiler"]

}
